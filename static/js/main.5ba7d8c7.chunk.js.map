{"version":3,"sources":["App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["doSomethingToNameLines","str","cb","split","map","line","test","App","useState","output","setOutput","searchReplace","setSearchReplace","resultBox","useRef","theme","textAlign","fontSize","padding","templateColumns","gap","placeholder","variant","onChange","e","val","target","value","outString","index","match","modLine","slice","join","height","resize","border","borderRadius","ref","components","h1","children","marginTop","size","remarkPlugins","gfm","leftIcon","Copy","onClick","range","document","createRange","selectNode","current","window","getSelection","removeAllRanges","addRange","execCommand","text","marginLeft","prev","Check","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ba7d8c7.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { ChangeEvent, useRef, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  ChakraProvider,\n  Divider,\n  Grid,\n  Heading,\n  Input,\n  Textarea,\n  theme,\n} from \"@chakra-ui/react\";\nimport { CopyIcon, CheckIcon } from \"@chakra-ui/icons\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nconst doSomethingToNameLines = (str: string, cb: (str: string) => string) => {\n  const arr = str.split(/\\r?\\n/);\n  return arr.map((line) => {\n    if (/\\d*:\\d\\d/.test(line)) {\n      return cb(line);\n    }\n    return line;\n  });\n};\n\nexport const App = () => {\n  const [output, setOutput] = useState(\"\");\n\n  const [searchReplace, setSearchReplace] = useState([\"\", \"\"]);\n\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    const val = e?.target?.value;\n    const outString = doSomethingToNameLines(val, (line) => {\n      const index = line.match(/\\d/)?.index;\n      const modLine = line.slice(0, index) + \" \" + line.slice(index);\n      return `# ${modLine}`;\n    }).join(\"\\n\\n\");\n    setOutput(outString);\n  };\n\n  const handleClick = () => {\n    const range = document.createRange();\n    range.selectNode(resultBox.current);\n    window.getSelection()?.removeAllRanges();\n    window.getSelection()?.addRange(range);\n    document.execCommand(\"copy\");\n    window.getSelection()?.removeAllRanges();\n  };\n\n  const resultBox = useRef<any>(null);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"left\" fontSize=\"xl\">\n        <Heading textAlign={\"center\"}>ü§ù Meet Chat Formatter</Heading>\n        <Grid padding={\"5rem\"} templateColumns={\"1fr 1fr\"} gap={\"1rem\"}>\n          <Box>\n            <Textarea\n              placeholder={\"Paste Google Meet Chat\"}\n              variant={\"filled\"}\n              onChange={handleChange}\n              height={\"100%\"}\n              resize={\"none\"}\n              padding={\"1rem\"}\n            />\n          </Box>\n          <Box\n            padding={\"1rem 2rem\"}\n            border={\"1px solid black\"}\n            borderRadius={\"6px\"}\n          >\n            <div ref={resultBox}>\n              <ReactMarkdown\n                components={{\n                  h1: ({ children }) => (\n                    <Heading marginTop={\"1rem\"} size={\"md\"}>\n                      {children}\n                    </Heading>\n                  ),\n                }}\n                remarkPlugins={[gfm]}\n              >\n                {output}\n              </ReactMarkdown>\n            </div>\n          </Box>\n          <Box></Box>\n          <Box>\n            <Button leftIcon={<CopyIcon />} onClick={handleClick}>\n              Copy formatted\n            </Button>\n            <CopyToClipboard text={output}>\n              <Button leftIcon={<CopyIcon />} marginLeft={\"1rem\"}>\n                Copy markdown\n              </Button>\n            </CopyToClipboard>\n          </Box>\n        </Grid>\n        <Divider />\n        <Grid padding={\"2rem 5rem\"} templateColumns={\"1fr 1fr\"} gap={\"1rem\"}>\n          <Box>\n            <Input\n              variant={\"filled\"}\n              placeholder={\"Search Name\"}\n              onChange={(e) =>\n                setSearchReplace((prev) => [e.target.value, prev[1]])\n              }\n            />\n          </Box>\n          <Box>\n            <Input\n              variant={\"filled\"}\n              placeholder={\"Replace With\"}\n              onChange={(e) =>\n                setSearchReplace((prev) => [prev[0], e.target.value])\n              }\n            />\n            <Button\n              marginTop={\"1rem\"}\n              leftIcon={<CheckIcon />}\n              onClick={() => {\n                const outString = doSomethingToNameLines(output, (line) => {\n                  return line.replace(searchReplace[0], searchReplace[1]);\n                }).join(\"\\n\");\n                setOutput(outString);\n              }}\n            >\n              Confirm\n            </Button>\n          </Box>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}